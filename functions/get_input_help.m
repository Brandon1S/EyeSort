function helpText = get_input_help(fieldName)
    % GET_INPUT_HELP - Returns detailed help text for GUI input fields
    
    helpDB = struct();
    
    % Define help text for each field
    helpDB.offset = ['Sentence Offset in Pixels:\n\n' ...
        'The horizontal pixel offset from the start of the display to where ' ...
        'the sentence text begins. This value adjusts for any margin or ' ...
        'padding in your stimulus presentation.\n\n' ...
        'Default: 281 pixels\n\n' ...
        'Range: Typically 0-500 pixels depending on your display setup.'];
    
    helpDB.pxPerChar = ['Pixels-Per-Character:\n\n' ...
        'The average width in pixels of each character in your stimulus text. ' ...
        'This is used to calculate character positions for interest area boundaries.\n\n' ...
        'Default: 14 pixels\n' ...
        'Note: Measure this from your actual stimulus font and size.'];
    
    helpDB.numRegions = ['Number of Interest Regions:\n\n' ...
        'The total number of interest areas to define for each sentence. ' ...
        'Each region will be analyzed separately for fixation patterns.\n\n' ...
        'Default: 4 regions\n' ...
        'Range: 1-20 regions (practical limit)'];
    
    helpDB.regionNames = ['Region Names:\n\n' ...
        'Comma-separated list of names for each interest area. ' ...
        'Must match the number specified in "Number of Interest Regions".\n\n' ...
        'Default: Beginning, PreTarget, Target_word, Ending\n' ...
        'Format: Use descriptive names without spaces (use underscores instead)'];
    
    helpDB.condType = ['Condition Label Column Name(s):\n\n' ...
        'The column names in your text file that contains the condition ' ...
        'labels (descriptive names for experimental conditions). Can have multiple columns.\n\n' ...
        'Default: condition\n' ...
        'Example: "high_constraint", "low_constraint"'];
    
    helpDB.condName = ['Condition Trigger Code Column Name:\n\n' ...
        'The column name containing numeric trigger codes that correspond ' ...
        'to each experimental condition in your EEG data.\n\n' ...
        'Default: trigcondition\n' ...
        'Example: Column contains values like 211, 213, 221, 223'];
    
    helpDB.itemName = ['Item Trigger Code Column Name:\n\n' ...
        'The column name containing trigger codes that identify specific ' ...
        'stimulus items or trials in your EEG data.\n\n' ...
        'Default: trigitem\n' ...
        'Example: Column contains values like S1, S2, S3, etc.'];
    
    helpDB.startCode = ['Start Trial Code:\n\n' ...
        'The trigger code that marks the beginning of each trial in your ' ...
        'EEG data. Used to align behavioral and EEG data.\n\n' ...
        'Default: S254\n' ...
        'Format: Use the exact trigger format from your EEG system'];
    
    helpDB.endCode = ['End Trial Code:\n\n' ...
        'The trigger code that marks the end of each trial in your ' ...
        'EEG data.\n\n' ...
        'Default: S255\n' ...
        'Format: Use the exact trigger format from your EEG system'];
    
    helpDB.sentenceStart = ['Stimulus Start Code:\n\n' ...
        'The trigger code marking when the specific stimulus period begins ' ...
        'within each trial. Only used when "Specific Stimulus Period" is checked.\n\n' ...
        'Default: S250\n' ...
        'Usage: Allows precise timing of interest area analysis'];
    
    helpDB.sentenceEnd = ['Stimulus End Code:\n\n' ...
        'The trigger code marking when the specific stimulus period ends ' ...
        'within each trial. Only used when "Specific Stimulus Period" is checked.\n\n' ...
        'Default: S251\n' ...
        'Usage: Defines the window for eye-tracking analysis'];
    
    helpDB.condTriggers = ['Condition Triggers:\n\n' ...
        'Comma-separated list of trigger codes that identify different ' ...
        'experimental conditions in your EEG data.\n\n' ...
        'Default: S211, S213, S221, S223\n' ...
        'Format: Match the exact trigger codes from your experiment'];
    
    helpDB.itemTriggers = ['Item Triggers:\n\n' ...
        'Trigger codes identifying individual stimulus items. Supports ' ...
        'range notation for efficient specification.\n\n' ...
        'Default: S1:S112\n' ...
        'Examples: "S1:S50" or "S1:S50, S60:S80"\n' ...
        'Format: Use ranges (S1:S112) or individual codes (S1, S2, S3)'];
    
    helpDB.fixationType = ['Fixation Event Name:\n\n' ...
        'The name used in your eye-tracking data to identify fixation events.\n\n' ...
        'Default: R_fixation\n' ...
        'Note: Must match the exact event type name in your EEG dataset'];
    
    helpDB.fixationXField = ['Fixation X Position Field:\n\n' ...
        'The field name containing the horizontal position data for fixations.\n\n' ...
        'Default: fix_avgpos_x\n' ...
        'Usage: Used to determine which interest area contains each fixation'];
    
    helpDB.saccadeType = ['Saccade Event Name:\n\n' ...
        'The name used in your eye-tracking data to identify saccade events.\n\n' ...
        'Default: R_saccade\n' ...
        'Note: Must match the exact event type name in your EEG dataset'];
    
    helpDB.saccadeStartXField = ['Saccade Start X Position Field:\n\n' ...
        'The field name containing the horizontal start position of saccades.\n\n' ...
        'Default: sac_startpos_x\n' ...
        'Usage: Used to determine saccade origin for transition analysis'];
    
    helpDB.saccadeEndXField = ['Saccade End X Position Field:\n\n' ...
        'The field name containing the horizontal end position of saccades.\n\n' ...
        'Default: sac_endpos_x\n' ...
        'Usage: Used to determine saccade destination for transition analysis'];
    
    % Return help text for requested field
    if isfield(helpDB, fieldName)
        helpText = helpDB.(fieldName);
    else
        helpText = ['Help text not available for field: ' fieldName];
    end
end